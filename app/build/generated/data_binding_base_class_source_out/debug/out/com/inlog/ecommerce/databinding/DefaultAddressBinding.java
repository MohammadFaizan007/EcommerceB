// Generated by view binder compiler. Do not edit!
package com.inlog.ecommerce.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.inlog.ecommerce.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DefaultAddressBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView address1;

  @NonNull
  public final TextView address2;

  @NonNull
  public final TextView address3;

  @NonNull
  public final ImageView imgLocation;

  @NonNull
  public final TextView txvChangeAddressId;

  private DefaultAddressBinding(@NonNull LinearLayout rootView, @NonNull TextView address1,
      @NonNull TextView address2, @NonNull TextView address3, @NonNull ImageView imgLocation,
      @NonNull TextView txvChangeAddressId) {
    this.rootView = rootView;
    this.address1 = address1;
    this.address2 = address2;
    this.address3 = address3;
    this.imgLocation = imgLocation;
    this.txvChangeAddressId = txvChangeAddressId;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DefaultAddressBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DefaultAddressBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.default_address, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DefaultAddressBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.address1;
      TextView address1 = rootView.findViewById(id);
      if (address1 == null) {
        break missingId;
      }

      id = R.id.address2;
      TextView address2 = rootView.findViewById(id);
      if (address2 == null) {
        break missingId;
      }

      id = R.id.address3;
      TextView address3 = rootView.findViewById(id);
      if (address3 == null) {
        break missingId;
      }

      id = R.id.imgLocation;
      ImageView imgLocation = rootView.findViewById(id);
      if (imgLocation == null) {
        break missingId;
      }

      id = R.id.txvChangeAddressId;
      TextView txvChangeAddressId = rootView.findViewById(id);
      if (txvChangeAddressId == null) {
        break missingId;
      }

      return new DefaultAddressBinding((LinearLayout) rootView, address1, address2, address3,
          imgLocation, txvChangeAddressId);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
