// Generated by view binder compiler. Do not edit!
package com.inlog.ecommerce.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.daimajia.slider.library.Indicators.PagerIndicator;
import com.daimajia.slider.library.SliderLayout;
import com.inlog.ecommerce.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMapBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final PagerIndicator customIndicator;

  @NonNull
  public final EditText edittext;

  @NonNull
  public final Button filterObj;

  @NonNull
  public final RelativeLayout first;

  @NonNull
  public final GridView gridViewImageText;

  @NonNull
  public final ImageView ivMapTransparent;

  @NonNull
  public final LinearLayout layout;

  @NonNull
  public final LinearLayout layoutscroll;

  @NonNull
  public final RelativeLayout mapFrame;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final SliderLayout slider;

  @NonNull
  public final ScrollView svContainer;

  @NonNull
  public final RelativeLayout topview;

  private ActivityMapBinding(@NonNull CoordinatorLayout rootView,
      @NonNull PagerIndicator customIndicator, @NonNull EditText edittext,
      @NonNull Button filterObj, @NonNull RelativeLayout first, @NonNull GridView gridViewImageText,
      @NonNull ImageView ivMapTransparent, @NonNull LinearLayout layout,
      @NonNull LinearLayout layoutscroll, @NonNull RelativeLayout mapFrame,
      @NonNull NestedScrollView nestedScrollView, @NonNull RecyclerView recyclerView,
      @NonNull SliderLayout slider, @NonNull ScrollView svContainer,
      @NonNull RelativeLayout topview) {
    this.rootView = rootView;
    this.customIndicator = customIndicator;
    this.edittext = edittext;
    this.filterObj = filterObj;
    this.first = first;
    this.gridViewImageText = gridViewImageText;
    this.ivMapTransparent = ivMapTransparent;
    this.layout = layout;
    this.layoutscroll = layoutscroll;
    this.mapFrame = mapFrame;
    this.nestedScrollView = nestedScrollView;
    this.recyclerView = recyclerView;
    this.slider = slider;
    this.svContainer = svContainer;
    this.topview = topview;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMapBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMapBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_map, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMapBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.custom_indicator;
      PagerIndicator customIndicator = rootView.findViewById(id);
      if (customIndicator == null) {
        break missingId;
      }

      id = R.id.edittext;
      EditText edittext = rootView.findViewById(id);
      if (edittext == null) {
        break missingId;
      }

      id = R.id.filter_obj;
      Button filterObj = rootView.findViewById(id);
      if (filterObj == null) {
        break missingId;
      }

      id = R.id.first;
      RelativeLayout first = rootView.findViewById(id);
      if (first == null) {
        break missingId;
      }

      id = R.id.grid_view_image_text;
      GridView gridViewImageText = rootView.findViewById(id);
      if (gridViewImageText == null) {
        break missingId;
      }

      id = R.id.ivMapTransparent;
      ImageView ivMapTransparent = rootView.findViewById(id);
      if (ivMapTransparent == null) {
        break missingId;
      }

      id = R.id.layout;
      LinearLayout layout = rootView.findViewById(id);
      if (layout == null) {
        break missingId;
      }

      id = R.id.layoutscroll;
      LinearLayout layoutscroll = rootView.findViewById(id);
      if (layoutscroll == null) {
        break missingId;
      }

      id = R.id.map_frame;
      RelativeLayout mapFrame = rootView.findViewById(id);
      if (mapFrame == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = rootView.findViewById(id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = rootView.findViewById(id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.slider;
      SliderLayout slider = rootView.findViewById(id);
      if (slider == null) {
        break missingId;
      }

      id = R.id.sv_container;
      ScrollView svContainer = rootView.findViewById(id);
      if (svContainer == null) {
        break missingId;
      }

      id = R.id.topview;
      RelativeLayout topview = rootView.findViewById(id);
      if (topview == null) {
        break missingId;
      }

      return new ActivityMapBinding((CoordinatorLayout) rootView, customIndicator, edittext,
          filterObj, first, gridViewImageText, ivMapTransparent, layout, layoutscroll, mapFrame,
          nestedScrollView, recyclerView, slider, svContainer, topview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
